// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Data structure for retrieving the saved secret
///
/// Generated class from Pigeon that represents data sent in messages.
struct RetrieveSecretRequest {
  var key: String
  var androidPrompt: AndroidPrompt
  var iOsPrompt: IOsPrompt


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> RetrieveSecretRequest? {
    let key = pigeonVar_list[0] as! String
    let androidPrompt = pigeonVar_list[1] as! AndroidPrompt
    let iOsPrompt = pigeonVar_list[2] as! IOsPrompt

    return RetrieveSecretRequest(
      key: key,
      androidPrompt: androidPrompt,
      iOsPrompt: iOsPrompt
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      androidPrompt,
      iOsPrompt,
    ]
  }
}

/// Data structure for saving the saved secret
///
/// Generated class from Pigeon that represents data sent in messages.
struct SaveSecretRequest {
  var key: String
  var secret: String
  var androidPrompt: AndroidPrompt


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SaveSecretRequest? {
    let key = pigeonVar_list[0] as! String
    let secret = pigeonVar_list[1] as! String
    let androidPrompt = pigeonVar_list[2] as! AndroidPrompt

    return SaveSecretRequest(
      key: key,
      secret: secret,
      androidPrompt: androidPrompt
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      secret,
      androidPrompt,
    ]
  }
}

/// Defines text that's displayed in native OS prompt for authentication
///
/// title and cancel are required.
///
/// Generated class from Pigeon that represents data sent in messages.
struct AndroidPrompt {
  var title: String
  var cancelLabel: String
  var descriptionLabel: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AndroidPrompt? {
    let title = pigeonVar_list[0] as! String
    let cancelLabel = pigeonVar_list[1] as! String
    let descriptionLabel: String? = nilOrValue(pigeonVar_list[2])

    return AndroidPrompt(
      title: title,
      cancelLabel: cancelLabel,
      descriptionLabel: descriptionLabel
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      cancelLabel,
      descriptionLabel,
    ]
  }
}

/// The iOS native dialog is only shown when retrieving secret.
///
/// - For phones with Touch ID, the [touchIdText] is displayed in prompt.
/// - For phones with Face ID, the text is defined in plist file.
///
/// Generated class from Pigeon that represents data sent in messages.
struct IOsPrompt {
  var touchIdText: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IOsPrompt? {
    let touchIdText = pigeonVar_list[0] as! String

    return IOsPrompt(
      touchIdText: touchIdText
    )
  }
  func toList() -> [Any?] {
    return [
      touchIdText
    ]
  }
}

private class FlutterLockerPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return RetrieveSecretRequest.fromList(self.readValue() as! [Any?])
    case 130:
      return SaveSecretRequest.fromList(self.readValue() as! [Any?])
    case 131:
      return AndroidPrompt.fromList(self.readValue() as! [Any?])
    case 132:
      return IOsPrompt.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FlutterLockerPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? RetrieveSecretRequest {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? SaveSecretRequest {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? AndroidPrompt {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? IOsPrompt {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterLockerPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterLockerPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterLockerPigeonCodecWriter(data: data)
  }
}

class FlutterLockerPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = FlutterLockerPigeonCodec(readerWriter: FlutterLockerPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlutterLockerHostApi {
  func canAuthenticate(completion: @escaping (Result<Bool, Error>) -> Void)
  func save(request: SaveSecretRequest, completion: @escaping (Result<Void, Error>) -> Void)
  func retrieve(request: RetrieveSecretRequest, completion: @escaping (Result<String, Error>) -> Void)
  func delete(key: String, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlutterLockerHostApiSetup {
  static var codec: FlutterStandardMessageCodec { FlutterLockerPigeonCodec.shared }
  /// Sets up an instance of `FlutterLockerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlutterLockerHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let canAuthenticateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.canAuthenticate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      canAuthenticateChannel.setMessageHandler { _, reply in
        api.canAuthenticate { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      canAuthenticateChannel.setMessageHandler(nil)
    }
    let saveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.save\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      saveChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! SaveSecretRequest
        api.save(request: requestArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      saveChannel.setMessageHandler(nil)
    }
    let retrieveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.retrieve\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      retrieveChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! RetrieveSecretRequest
        api.retrieve(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      retrieveChannel.setMessageHandler(nil)
    }
    let deleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.delete\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        api.delete(key: keyArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteChannel.setMessageHandler(nil)
    }
  }
}
