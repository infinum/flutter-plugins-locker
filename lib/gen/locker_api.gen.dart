// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

/// Data structure for retrieving the saved secret
class RetrieveSecretRequest {
  RetrieveSecretRequest({
    required this.key,
    required this.androidPrompt,
    required this.iOsPrompt,
  });

  String key;

  AndroidPrompt androidPrompt;

  IOsPrompt iOsPrompt;

  Object encode() {
    return <Object?>[
      key,
      androidPrompt,
      iOsPrompt,
    ];
  }

  static RetrieveSecretRequest decode(Object result) {
    result as List<Object?>;
    return RetrieveSecretRequest(
      key: result[0]! as String,
      androidPrompt: result[1]! as AndroidPrompt,
      iOsPrompt: result[2]! as IOsPrompt,
    );
  }
}

/// Data structure for saving the saved secret
class SaveSecretRequest {
  SaveSecretRequest({
    required this.key,
    required this.secret,
    required this.androidPrompt,
  });

  String key;

  String secret;

  AndroidPrompt androidPrompt;

  Object encode() {
    return <Object?>[
      key,
      secret,
      androidPrompt,
    ];
  }

  static SaveSecretRequest decode(Object result) {
    result as List<Object?>;
    return SaveSecretRequest(
      key: result[0]! as String,
      secret: result[1]! as String,
      androidPrompt: result[2]! as AndroidPrompt,
    );
  }
}

/// Defines text that's displayed in native OS prompt for authentication
///
/// title and cancel are required.
class AndroidPrompt {
  AndroidPrompt({
    required this.title,
    required this.cancelLabel,
    this.descriptionLabel,
  });

  String title;

  String cancelLabel;

  String? descriptionLabel;

  Object encode() {
    return <Object?>[
      title,
      cancelLabel,
      descriptionLabel,
    ];
  }

  static AndroidPrompt decode(Object result) {
    result as List<Object?>;
    return AndroidPrompt(
      title: result[0]! as String,
      cancelLabel: result[1]! as String,
      descriptionLabel: result[2] as String?,
    );
  }
}

/// The iOS native dialog is only shown when retrieving secret.
///
/// - For phones with Touch ID, the [touchIdText] is displayed in prompt.
/// - For phones with Face ID, the text is defined in plist file.
class IOsPrompt {
  IOsPrompt({
    required this.touchIdText,
  });

  String touchIdText;

  Object encode() {
    return <Object?>[
      touchIdText,
    ];
  }

  static IOsPrompt decode(Object result) {
    result as List<Object?>;
    return IOsPrompt(
      touchIdText: result[0]! as String,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is RetrieveSecretRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is SaveSecretRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is AndroidPrompt) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is IOsPrompt) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return RetrieveSecretRequest.decode(readValue(buffer)!);
      case 130: 
        return SaveSecretRequest.decode(readValue(buffer)!);
      case 131: 
        return AndroidPrompt.decode(readValue(buffer)!);
      case 132: 
        return IOsPrompt.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FlutterLockerHostApi {
  /// Constructor for [FlutterLockerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterLockerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<bool> canAuthenticate() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.canAuthenticate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> save(SaveSecretRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.save$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> retrieve(RetrieveSecretRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.retrieve$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<void> delete(String key) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.delete$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[key]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
