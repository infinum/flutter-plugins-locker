// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.infinum.flutter_locker

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * Data structure for retrieving the saved secret
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class RetrieveSecretRequest (
  val key: String,
  val androidPrompt: AndroidPrompt,
  val iOsPrompt: IOsPrompt
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RetrieveSecretRequest {
      val key = pigeonVar_list[0] as String
      val androidPrompt = pigeonVar_list[1] as AndroidPrompt
      val iOsPrompt = pigeonVar_list[2] as IOsPrompt
      return RetrieveSecretRequest(key, androidPrompt, iOsPrompt)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      key,
      androidPrompt,
      iOsPrompt,
    )
  }
}

/**
 * Data structure for saving the saved secret
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class SaveSecretRequest (
  val key: String,
  val secret: String,
  val androidPrompt: AndroidPrompt
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SaveSecretRequest {
      val key = pigeonVar_list[0] as String
      val secret = pigeonVar_list[1] as String
      val androidPrompt = pigeonVar_list[2] as AndroidPrompt
      return SaveSecretRequest(key, secret, androidPrompt)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      key,
      secret,
      androidPrompt,
    )
  }
}

/**
 * Defines text that's displayed in native OS prompt for authentication
 *
 * title and cancel are required.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AndroidPrompt (
  val title: String,
  val cancelLabel: String,
  val descriptionLabel: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidPrompt {
      val title = pigeonVar_list[0] as String
      val cancelLabel = pigeonVar_list[1] as String
      val descriptionLabel = pigeonVar_list[2] as String?
      return AndroidPrompt(title, cancelLabel, descriptionLabel)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      title,
      cancelLabel,
      descriptionLabel,
    )
  }
}

/**
 * The iOS native dialog is only shown when retrieving secret.
 *
 * - For phones with Touch ID, the [touchIdText] is displayed in prompt.
 * - For phones with Face ID, the text is defined in plist file.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class IOsPrompt (
  val touchIdText: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IOsPrompt {
      val touchIdText = pigeonVar_list[0] as String
      return IOsPrompt(touchIdText)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      touchIdText,
    )
  }
}
private open class FlutterLockerPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RetrieveSecretRequest.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SaveSecretRequest.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidPrompt.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IOsPrompt.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is RetrieveSecretRequest -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is SaveSecretRequest -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is AndroidPrompt -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is IOsPrompt -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FlutterLockerHostApi {
  fun canAuthenticate(callback: (Result<Boolean>) -> Unit)
  fun save(request: SaveSecretRequest, callback: (Result<Unit>) -> Unit)
  fun retrieve(request: RetrieveSecretRequest, callback: (Result<String>) -> Unit)
  fun delete(key: String, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by FlutterLockerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      FlutterLockerPigeonCodec()
    }
    /** Sets up an instance of `FlutterLockerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FlutterLockerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.canAuthenticate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.canAuthenticate{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.save$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as SaveSecretRequest
            api.save(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.retrieve$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as RetrieveSecretRequest
            api.retrieve(requestArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_locker.FlutterLockerHostApi.delete$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            api.delete(keyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
